<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.busgo.wallet.inner.dao.UsdtTxRecordDao">
    <!--Create by Auto Generator -->
    <resultMap type="com.busgo.wallet.inner.model.UsdtTxRecord" id="UsdtTxRecordMap">
        <result column="id" property="id"/>
        <result column="symbol" property="symbol"/>
        <result column="serial_no" property="serialNo"/>
        <result column="block_number" property="blockNumber"/>
        <result column="tx_hash" property="txHash"/>
        <result column="amount" property="amount"/>
        <result column="times" property="times"/>
        <result column="side" property="side"/>
        <result column="from" property="from"/>
        <result column="to" property="to"/>
        <result column="contract_address" property="contractAddress"/>
        <result column="status" property="status"/>
        <result column="timestamp" property="timestamp"/>
        <result column="create_time" property="createTime"/>
        <result column="modify_time" property="modifyTime"/>
    </resultMap>


    <sql id="_field_list">
         `id`,
         `symbol`,
         `serial_no`,
         `block_number`,
         `tx_hash`,
         `amount`,
         `times`,
         `side`,
         `from`,
         `to`,
         `contract_address`,
         `status`,
         `timestamp`,
         `create_time`,
         `modify_time`
    </sql>

    <sql id="_value_list">
     #{id},
     #{symbol},
     #{serialNo},
     #{blockNumber},
     #{txHash},
     #{amount},
     #{times},
     #{side},
     #{from},
     #{to},
     #{contractAddress},
     #{status},
     #{timestamp},
     #{createTime},
     #{modifyTime}
    </sql>

    <sql id="_batch_value_list">
     #{item.id},
     #{item.symbol},
     #{item.serialNo},
     #{item.blockNumber},
     #{item.txHash},
     #{item.amount},
     #{item.times},
     #{item.side},
     #{item.from},
     #{item.to},
     #{item.contractAddress},
     #{item.status},
     #{item.timestamp},
     #{item.createTime},
     #{item.modifyTime}
    </sql>

    <sql id="_common_where">
     <if test="id !=null">AND `id`=#{id}</if>
     <if test="symbol !=null">AND `symbol`=#{symbol}</if>
     <if test="serialNo !=null">AND `serial_no`=#{serialNo}</if>
     <if test="blockNumber !=null">AND `block_number`=#{blockNumber}</if>
     <if test="txHash !=null">AND `tx_hash`=#{txHash}</if>
     <if test="amount !=null">AND `amount`=#{amount}</if>
     <if test="times !=null">AND `times`=#{times}</if>
     <if test="side !=null">AND `side`=#{side}</if>
     <if test="from !=null">AND `from`=#{from}</if>
     <if test="to !=null">AND `to`=#{to}</if>
     <if test="contractAddress !=null">AND `contract_address`=#{contractAddress}</if>
     <if test="status !=null">AND `status`=#{status}</if>
     <if test="timestamp !=null">AND `timestamp`=#{timestamp}</if>
     <if test="createTime !=null">AND `create_time`=#{createTime}</if>
     <if test="modifyTime !=null">AND `modify_time`=#{modifyTime}</if>
        <if test="includeIdList !=null and includeIdList.size()>0">
            AND `id` IN
            <foreach collection="includeIdList" item="item" open="(" close=")"
                     separator=",">
                    #{item}
            </foreach>
        </if>
        <if test="excludeIdList !=null and excludeIdList.size()>0">
            AND `id` NOT IN
            <foreach collection="excludeIdList" item="item" open="(" close=")"
                     separator=",">
                    #{item}
            </foreach>
        </if>
          <if test="includeIdList !=null and includeIdList.size()>0">
              AND `id` IN
              <foreach collection="includeIdList" item="item" open="(" close=")"
                       separator=",">
                     #{item}
              </foreach>
          </if>
        <if test="excludeIdList !=null and excludeIdList.size() >0">
            AND `id` NOT IN
            <foreach collection="excludeIdList" item="item" open="(" close=")" separator=",">
                     #{item}
            </foreach>
        </if>
          <if test="includeSymbolList !=null and includeSymbolList.size()>0">
              AND `symbol` IN
              <foreach collection="includeSymbolList" item="item" open="(" close=")"
                       separator=",">
                     #{item}
              </foreach>
          </if>
        <if test="excludeSymbolList !=null and excludeSymbolList.size() >0">
            AND `symbol` NOT IN
            <foreach collection="excludeSymbolList" item="item" open="(" close=")" separator=",">
                     #{item}
            </foreach>
        </if>
          <if test="includeSerialNoList !=null and includeSerialNoList.size()>0">
              AND `serial_no` IN
              <foreach collection="includeSerialNoList" item="item" open="(" close=")"
                       separator=",">
                     #{item}
              </foreach>
          </if>
        <if test="excludeSerialNoList !=null and excludeSerialNoList.size() >0">
            AND `serial_no` NOT IN
            <foreach collection="excludeSerialNoList" item="item" open="(" close=")" separator=",">
                     #{item}
            </foreach>
        </if>
          <if test="includeBlockNumberList !=null and includeBlockNumberList.size()>0">
              AND `block_number` IN
              <foreach collection="includeBlockNumberList" item="item" open="(" close=")"
                       separator=",">
                     #{item}
              </foreach>
          </if>
        <if test="excludeBlockNumberList !=null and excludeBlockNumberList.size() >0">
            AND `block_number` NOT IN
            <foreach collection="excludeBlockNumberList" item="item" open="(" close=")" separator=",">
                     #{item}
            </foreach>
        </if>
          <if test="includeTxHashList !=null and includeTxHashList.size()>0">
              AND `tx_hash` IN
              <foreach collection="includeTxHashList" item="item" open="(" close=")"
                       separator=",">
                     #{item}
              </foreach>
          </if>
        <if test="excludeTxHashList !=null and excludeTxHashList.size() >0">
            AND `tx_hash` NOT IN
            <foreach collection="excludeTxHashList" item="item" open="(" close=")" separator=",">
                     #{item}
            </foreach>
        </if>
          <if test="includeAmountList !=null and includeAmountList.size()>0">
              AND `amount` IN
              <foreach collection="includeAmountList" item="item" open="(" close=")"
                       separator=",">
                     #{item}
              </foreach>
          </if>
        <if test="excludeAmountList !=null and excludeAmountList.size() >0">
            AND `amount` NOT IN
            <foreach collection="excludeAmountList" item="item" open="(" close=")" separator=",">
                     #{item}
            </foreach>
        </if>
          <if test="includeTimesList !=null and includeTimesList.size()>0">
              AND `times` IN
              <foreach collection="includeTimesList" item="item" open="(" close=")"
                       separator=",">
                     #{item}
              </foreach>
          </if>
        <if test="excludeTimesList !=null and excludeTimesList.size() >0">
            AND `times` NOT IN
            <foreach collection="excludeTimesList" item="item" open="(" close=")" separator=",">
                     #{item}
            </foreach>
        </if>
          <if test="includeSideList !=null and includeSideList.size()>0">
              AND `side` IN
              <foreach collection="includeSideList" item="item" open="(" close=")"
                       separator=",">
                     #{item}
              </foreach>
          </if>
        <if test="excludeSideList !=null and excludeSideList.size() >0">
            AND `side` NOT IN
            <foreach collection="excludeSideList" item="item" open="(" close=")" separator=",">
                     #{item}
            </foreach>
        </if>
          <if test="includeFromList !=null and includeFromList.size()>0">
              AND `from` IN
              <foreach collection="includeFromList" item="item" open="(" close=")"
                       separator=",">
                     #{item}
              </foreach>
          </if>
        <if test="excludeFromList !=null and excludeFromList.size() >0">
            AND `from` NOT IN
            <foreach collection="excludeFromList" item="item" open="(" close=")" separator=",">
                     #{item}
            </foreach>
        </if>
          <if test="includeToList !=null and includeToList.size()>0">
              AND `to` IN
              <foreach collection="includeToList" item="item" open="(" close=")"
                       separator=",">
                     #{item}
              </foreach>
          </if>
        <if test="excludeToList !=null and excludeToList.size() >0">
            AND `to` NOT IN
            <foreach collection="excludeToList" item="item" open="(" close=")" separator=",">
                     #{item}
            </foreach>
        </if>
          <if test="includeContractAddressList !=null and includeContractAddressList.size()>0">
              AND `contract_address` IN
              <foreach collection="includeContractAddressList" item="item" open="(" close=")"
                       separator=",">
                     #{item}
              </foreach>
          </if>
        <if test="excludeContractAddressList !=null and excludeContractAddressList.size() >0">
            AND `contract_address` NOT IN
            <foreach collection="excludeContractAddressList" item="item" open="(" close=")" separator=",">
                     #{item}
            </foreach>
        </if>
          <if test="includeStatusList !=null and includeStatusList.size()>0">
              AND `status` IN
              <foreach collection="includeStatusList" item="item" open="(" close=")"
                       separator=",">
                     #{item}
              </foreach>
          </if>
        <if test="excludeStatusList !=null and excludeStatusList.size() >0">
            AND `status` NOT IN
            <foreach collection="excludeStatusList" item="item" open="(" close=")" separator=",">
                     #{item}
            </foreach>
        </if>
          <if test="includeTimestampList !=null and includeTimestampList.size()>0">
              AND `timestamp` IN
              <foreach collection="includeTimestampList" item="item" open="(" close=")"
                       separator=",">
                     #{item}
              </foreach>
          </if>
        <if test="excludeTimestampList !=null and excludeTimestampList.size() >0">
            AND `timestamp` NOT IN
            <foreach collection="excludeTimestampList" item="item" open="(" close=")" separator=",">
                     #{item}
            </foreach>
        </if>
          <if test="includeCreateTimeList !=null and includeCreateTimeList.size()>0">
              AND `create_time` IN
              <foreach collection="includeCreateTimeList" item="item" open="(" close=")"
                       separator=",">
                     #{item}
              </foreach>
          </if>
        <if test="excludeCreateTimeList !=null and excludeCreateTimeList.size() >0">
            AND `create_time` NOT IN
            <foreach collection="excludeCreateTimeList" item="item" open="(" close=")" separator=",">
                     #{item}
            </foreach>
        </if>
          <if test="includeModifyTimeList !=null and includeModifyTimeList.size()>0">
              AND `modify_time` IN
              <foreach collection="includeModifyTimeList" item="item" open="(" close=")"
                       separator=",">
                     #{item}
              </foreach>
          </if>
        <if test="excludeModifyTimeList !=null and excludeModifyTimeList.size() >0">
            AND `modify_time` NOT IN
            <foreach collection="excludeModifyTimeList" item="item" open="(" close=")" separator=",">
                     #{item}
            </foreach>
        </if>
    </sql>

    <sql id="_common_sort">
        <if test="sorts !=null">
            ORDER BY
            <foreach collection="sorts" item="sort" separator=",">
            ${sort.columnName} ${sort.sortMode.mode}
            </foreach>
        </if>
    </sql>

    <sql id="_page_field">
        <if test="offset != null and rows !=null">
           LIMIT #{offset},#{rows}
        </if>
    </sql>

    <insert id="insert" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO `usdt_tx_record`
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <include refid="_field_list"/>
        </trim>
        VALUES
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <include refid="_value_list"/>
        </trim>
    </insert>

    <insert id="batchInsert" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO `usdt_tx_record`
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <include refid="_field_list"/>
        </trim>
        VALUES
        <foreach collection="list" item="item" separator=",">
            (
            <include refid="_batch_value_list"/>
            )
        </foreach>
    </insert>

    <select id="selectById" parameterType="java.lang.Long" resultMap="UsdtTxRecordMap">
        SELECT
        <include refid="_field_list"/>
        FROM `usdt_tx_record`
        WHERE `id` = #{id} limit 1
    </select>

    <select id="selectByIdForUpdate" parameterType="java.lang.Long"
            resultMap="UsdtTxRecordMap">
        SELECT
        <include refid="_field_list"/>
        FROM `usdt_tx_record`
        WHERE `id` = #{id} limit 1 FOR UPDATE
    </select>

    <delete id="deleteById" parameterType="java.lang.Long">
        DELETE FROM `usdt_tx_record` WHERE `id` = #
        {id} limit 1
    </delete>

    <delete id="deleteByParam" parameterType="map">
        DELETE
        FROM `usdt_tx_record`
        <where>
            <include refid="_common_where"/>
        </where>
    </delete>

    <update id="updateById">
        UPDATE `usdt_tx_record`
        <trim prefix="SET" suffixOverrides="," prefixOverrides=",">
            <if test="symbol !=null">`symbol`=#{symbol},</if>
            <if test="serialNo !=null">`serial_no`=#{serialNo},</if>
            <if test="blockNumber !=null">`block_number`=#{blockNumber},</if>
            <if test="txHash !=null">`tx_hash`=#{txHash},</if>
            <if test="amount !=null">`amount`=#{amount},</if>
            <if test="times !=null">`times`=#{times},</if>
            <if test="side !=null">`side`=#{side},</if>
            <if test="from !=null">`from`=#{from},</if>
            <if test="to !=null">`to`=#{to},</if>
            <if test="contractAddress !=null">`contract_address`=#{contractAddress},</if>
            <if test="status !=null">`status`=#{status},</if>
            <if test="timestamp !=null">`timestamp`=#{timestamp},</if>
            <if test="createTime !=null">`create_time`=#{createTime},</if>
            <if test="modifyTime !=null">`modify_time`=#{modifyTime},</if>
        </trim>
        WHERE `id`=#{id} LIMIT 1
    </update>

    <update id="updateByQuery">
        UPDATE `usdt_tx_record`
        <trim prefix="SET" suffixOverrides="," prefixOverrides=",">
            <if test="po.symbol !=null">`symbol`=#{po.symbol},</if>
            <if test="po.serialNo !=null">`serial_no`=#{po.serialNo},</if>
            <if test="po.blockNumber !=null">`block_number`=#{po.blockNumber},</if>
            <if test="po.txHash !=null">`tx_hash`=#{po.txHash},</if>
            <if test="po.amount !=null">`amount`=#{po.amount},</if>
            <if test="po.times !=null">`times`=#{po.times},</if>
            <if test="po.side !=null">`side`=#{po.side},</if>
            <if test="po.from !=null">`from`=#{po.from},</if>
            <if test="po.to !=null">`to`=#{po.to},</if>
            <if test="po.contractAddress !=null">`contract_address`=#{po.contractAddress},</if>
            <if test="po.status !=null">`status`=#{po.status},</if>
            <if test="po.timestamp !=null">`timestamp`=#{po.timestamp},</if>
            <if test="po.createTime !=null">`create_time`=#{po.createTime},</if>
            <if test="po.modifyTime !=null">`modify_time`=#{po.modifyTime},</if>
        </trim>
        <where>
            <if test="query.id !=null">AND `id`=#
                {query.id}
            </if>
            <if test="query.symbol !=null">AND `symbol`=#
                {query.symbol}
            </if>
            <if test="query.serialNo !=null">AND `serial_no`=#
                {query.serialNo}
            </if>
            <if test="query.blockNumber !=null">AND `block_number`=#
                {query.blockNumber}
            </if>
            <if test="query.txHash !=null">AND `tx_hash`=#
                {query.txHash}
            </if>
            <if test="query.amount !=null">AND `amount`=#
                {query.amount}
            </if>
            <if test="query.times !=null">AND `times`=#
                {query.times}
            </if>
            <if test="query.side !=null">AND `side`=#
                {query.side}
            </if>
            <if test="query.from !=null">AND `from`=#
                {query.from}
            </if>
            <if test="query.to !=null">AND `to`=#
                {query.to}
            </if>
            <if test="query.contractAddress !=null">AND `contract_address`=#
                {query.contractAddress}
            </if>
            <if test="query.status !=null">AND `status`=#
                {query.status}
            </if>
            <if test="query.timestamp !=null">AND `timestamp`=#
                {query.timestamp}
            </if>
            <if test="query.createTime !=null">AND `create_time`=#
                {query.createTime}
            </if>
            <if test="query.modifyTime !=null">AND `modify_time`=#
                {query.modifyTime}
            </if>
        </where>
    </update>

    <select id="queryListByParam" parameterType="map" resultMap="UsdtTxRecordMap">
        SELECT
        <include refid="_field_list"/>
        FROM `usdt_tx_record`
        <where>
            <include refid="_common_where"/>
        </where>
        <include refid="_common_sort"/>
        <include refid="_page_field"/>
    </select>

    <select id="queryCountByParam" parameterType="map" resultType="java.lang.Integer">
        SELECT
        COUNT(*)
        FROM `usdt_tx_record`
        <where>
            <include refid="_common_where"/>
        </where>
    </select>

    <!--pk field list search-->
    <select id="queryPkListByParam" parameterType="map" resultType="java.lang.Long">
        SELECT
        `id`
        FROM `usdt_tx_record`
        <where>
            <include refid="_common_where"/>
        </where>
        <include refid="_common_sort"/>
        <include refid="_page_field"/>
    </select>

    <!--single field list search-->
    <select id="queryIdListByParam" parameterType="map" resultType="java.lang.Long">
        SELECT DISTINCT(`id`) FROM `usdt_tx_record`
        <where>
            <include refid="_common_where"/>
        </where>
        <include refid="_common_sort"/>
        <include refid="_page_field"/>
    </select>

    <select id="querySymbolListByParam" parameterType="map" resultType="java.lang.String">
        SELECT DISTINCT(`symbol`) FROM `usdt_tx_record`
        <where>
            <include refid="_common_where"/>
        </where>
        <include refid="_common_sort"/>
        <include refid="_page_field"/>
    </select>

    <select id="querySerialNoListByParam" parameterType="map" resultType="java.lang.String">
        SELECT DISTINCT(`serial_no`) FROM `usdt_tx_record`
        <where>
            <include refid="_common_where"/>
        </where>
        <include refid="_common_sort"/>
        <include refid="_page_field"/>
    </select>

    <select id="queryBlockNumberListByParam" parameterType="map" resultType="java.lang.Long">
        SELECT DISTINCT(`block_number`) FROM `usdt_tx_record`
        <where>
            <include refid="_common_where"/>
        </where>
        <include refid="_common_sort"/>
        <include refid="_page_field"/>
    </select>

    <select id="queryTxHashListByParam" parameterType="map" resultType="java.lang.String">
        SELECT DISTINCT(`tx_hash`) FROM `usdt_tx_record`
        <where>
            <include refid="_common_where"/>
        </where>
        <include refid="_common_sort"/>
        <include refid="_page_field"/>
    </select>

    <select id="queryAmountListByParam" parameterType="map" resultType="java.math.BigDecimal">
        SELECT DISTINCT(`amount`) FROM `usdt_tx_record`
        <where>
            <include refid="_common_where"/>
        </where>
        <include refid="_common_sort"/>
        <include refid="_page_field"/>
    </select>

    <select id="queryTimesListByParam" parameterType="map" resultType="java.lang.Integer">
        SELECT DISTINCT(`times`) FROM `usdt_tx_record`
        <where>
            <include refid="_common_where"/>
        </where>
        <include refid="_common_sort"/>
        <include refid="_page_field"/>
    </select>

    <select id="querySideListByParam" parameterType="map" resultType="java.lang.Integer">
        SELECT DISTINCT(`side`) FROM `usdt_tx_record`
        <where>
            <include refid="_common_where"/>
        </where>
        <include refid="_common_sort"/>
        <include refid="_page_field"/>
    </select>

    <select id="queryFromListByParam" parameterType="map" resultType="java.lang.String">
        SELECT DISTINCT(`from`) FROM `usdt_tx_record`
        <where>
            <include refid="_common_where"/>
        </where>
        <include refid="_common_sort"/>
        <include refid="_page_field"/>
    </select>

    <select id="queryToListByParam" parameterType="map" resultType="java.lang.String">
        SELECT DISTINCT(`to`) FROM `usdt_tx_record`
        <where>
            <include refid="_common_where"/>
        </where>
        <include refid="_common_sort"/>
        <include refid="_page_field"/>
    </select>

    <select id="queryContractAddressListByParam" parameterType="map" resultType="java.lang.String">
        SELECT DISTINCT(`contract_address`) FROM `usdt_tx_record`
        <where>
            <include refid="_common_where"/>
        </where>
        <include refid="_common_sort"/>
        <include refid="_page_field"/>
    </select>

    <select id="queryStatusListByParam" parameterType="map" resultType="java.lang.Integer">
        SELECT DISTINCT(`status`) FROM `usdt_tx_record`
        <where>
            <include refid="_common_where"/>
        </where>
        <include refid="_common_sort"/>
        <include refid="_page_field"/>
    </select>

    <select id="queryTimestampListByParam" parameterType="map" resultType="java.lang.Long">
        SELECT DISTINCT(`timestamp`) FROM `usdt_tx_record`
        <where>
            <include refid="_common_where"/>
        </where>
        <include refid="_common_sort"/>
        <include refid="_page_field"/>
    </select>

    <select id="queryCreateTimeListByParam" parameterType="map" resultType="java.util.Date">
        SELECT DISTINCT(`create_time`) FROM `usdt_tx_record`
        <where>
            <include refid="_common_where"/>
        </where>
        <include refid="_common_sort"/>
        <include refid="_page_field"/>
    </select>

    <select id="queryModifyTimeListByParam" parameterType="map" resultType="java.util.Date">
        SELECT DISTINCT(`modify_time`) FROM `usdt_tx_record`
        <where>
            <include refid="_common_where"/>
        </where>
        <include refid="_common_sort"/>
        <include refid="_page_field"/>
    </select>


    <!--single field Count search-->
    <select id="queryIdCountByParam" parameterType="map" resultType="java.lang.Integer">
        SELECT COUNT(DISTINCT(`id`)) FROM `usdt_tx_record`
        <where>
            <include refid="_common_where"/>
        </where>
    </select>

    <select id="querySymbolCountByParam" parameterType="map" resultType="java.lang.Integer">
        SELECT COUNT(DISTINCT(`symbol`)) FROM `usdt_tx_record`
        <where>
            <include refid="_common_where"/>
        </where>
    </select>

    <select id="querySerialNoCountByParam" parameterType="map" resultType="java.lang.Integer">
        SELECT COUNT(DISTINCT(`serial_no`)) FROM `usdt_tx_record`
        <where>
            <include refid="_common_where"/>
        </where>
    </select>

    <select id="queryBlockNumberCountByParam" parameterType="map" resultType="java.lang.Integer">
        SELECT COUNT(DISTINCT(`block_number`)) FROM `usdt_tx_record`
        <where>
            <include refid="_common_where"/>
        </where>
    </select>

    <select id="queryTxHashCountByParam" parameterType="map" resultType="java.lang.Integer">
        SELECT COUNT(DISTINCT(`tx_hash`)) FROM `usdt_tx_record`
        <where>
            <include refid="_common_where"/>
        </where>
    </select>

    <select id="queryAmountCountByParam" parameterType="map" resultType="java.lang.Integer">
        SELECT COUNT(DISTINCT(`amount`)) FROM `usdt_tx_record`
        <where>
            <include refid="_common_where"/>
        </where>
    </select>

    <select id="queryTimesCountByParam" parameterType="map" resultType="java.lang.Integer">
        SELECT COUNT(DISTINCT(`times`)) FROM `usdt_tx_record`
        <where>
            <include refid="_common_where"/>
        </where>
    </select>

    <select id="querySideCountByParam" parameterType="map" resultType="java.lang.Integer">
        SELECT COUNT(DISTINCT(`side`)) FROM `usdt_tx_record`
        <where>
            <include refid="_common_where"/>
        </where>
    </select>

    <select id="queryFromCountByParam" parameterType="map" resultType="java.lang.Integer">
        SELECT COUNT(DISTINCT(`from`)) FROM `usdt_tx_record`
        <where>
            <include refid="_common_where"/>
        </where>
    </select>

    <select id="queryToCountByParam" parameterType="map" resultType="java.lang.Integer">
        SELECT COUNT(DISTINCT(`to`)) FROM `usdt_tx_record`
        <where>
            <include refid="_common_where"/>
        </where>
    </select>

    <select id="queryContractAddressCountByParam" parameterType="map" resultType="java.lang.Integer">
        SELECT COUNT(DISTINCT(`contract_address`)) FROM `usdt_tx_record`
        <where>
            <include refid="_common_where"/>
        </where>
    </select>

    <select id="queryStatusCountByParam" parameterType="map" resultType="java.lang.Integer">
        SELECT COUNT(DISTINCT(`status`)) FROM `usdt_tx_record`
        <where>
            <include refid="_common_where"/>
        </where>
    </select>

    <select id="queryTimestampCountByParam" parameterType="map" resultType="java.lang.Integer">
        SELECT COUNT(DISTINCT(`timestamp`)) FROM `usdt_tx_record`
        <where>
            <include refid="_common_where"/>
        </where>
    </select>

    <select id="queryCreateTimeCountByParam" parameterType="map" resultType="java.lang.Integer">
        SELECT COUNT(DISTINCT(`create_time`)) FROM `usdt_tx_record`
        <where>
            <include refid="_common_where"/>
        </where>
    </select>

    <select id="queryModifyTimeCountByParam" parameterType="map" resultType="java.lang.Integer">
        SELECT COUNT(DISTINCT(`modify_time`)) FROM `usdt_tx_record`
        <where>
            <include refid="_common_where"/>
        </where>
    </select>

</mapper>