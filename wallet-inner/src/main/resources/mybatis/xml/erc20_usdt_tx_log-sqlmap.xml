<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.busgo.wallet.inner.dao.Erc20UsdtTxLogDao">
    <!--Create by Auto Generator -->
    <resultMap type="com.busgo.wallet.inner.model.Erc20UsdtTxLog" id="Erc20UsdtTxLogMap">
        <result column="id" property="id"/>
        <result column="block_number" property="blockNumber"/>
        <result column="tx_hash" property="txHash"/>
        <result column="quantity" property="quantity"/>
        <result column="type" property="type"/>
        <result column="from" property="from"/>
        <result column="to" property="to"/>
        <result column="contract_address" property="contractAddress"/>
        <result column="status" property="status"/>
        <result column="timestamp" property="timestamp"/>
        <result column="create_time" property="createTime"/>
        <result column="modify_time" property="modifyTime"/>
    </resultMap>


    <sql id="_field_list">
         `id`,
         `block_number`,
         `tx_hash`,
         `quantity`,
         `type`,
         `from`,
         `to`,
         `contract_address`,
         `status`,
         `timestamp`,
         `create_time`,
         `modify_time`
    </sql>

    <sql id="_value_list">
     #{id},
     #{blockNumber},
     #{txHash},
     #{quantity},
     #{type},
     #{from},
     #{to},
     #{contractAddress},
     #{status},
     #{timestamp},
     #{createTime},
     #{modifyTime}
    </sql>

    <sql id="_batch_value_list">
     #{item.id},
     #{item.blockNumber},
     #{item.txHash},
     #{item.quantity},
     #{item.type},
     #{item.from},
     #{item.to},
     #{item.contractAddress},
     #{item.status},
     #{item.timestamp},
     #{item.createTime},
     #{item.modifyTime}
    </sql>

    <sql id="_common_where">
     <if test="id !=null">AND `id`=#{id}</if>
     <if test="blockNumber !=null">AND `block_number`=#{blockNumber}</if>
     <if test="txHash !=null">AND `tx_hash`=#{txHash}</if>
     <if test="quantity !=null">AND `quantity`=#{quantity}</if>
     <if test="type !=null">AND `type`=#{type}</if>
     <if test="from !=null">AND `from`=#{from}</if>
     <if test="to !=null">AND `to`=#{to}</if>
     <if test="contractAddress !=null">AND `contract_address`=#{contractAddress}</if>
     <if test="status !=null">AND `status`=#{status}</if>
     <if test="timestamp !=null">AND `timestamp`=#{timestamp}</if>
     <if test="createTime !=null">AND `create_time`=#{createTime}</if>
     <if test="modifyTime !=null">AND `modify_time`=#{modifyTime}</if>
        <if test="includeIdList !=null and includeIdList.size()>0">
            AND `id` IN
            <foreach collection="includeIdList" item="item" open="(" close=")"
                     separator=",">
                    #{item}
            </foreach>
        </if>
        <if test="excludeIdList !=null and excludeIdList.size()>0">
            AND `id` NOT IN
            <foreach collection="excludeIdList" item="item" open="(" close=")"
                     separator=",">
                    #{item}
            </foreach>
        </if>
          <if test="includeIdList !=null and includeIdList.size()>0">
              AND `id` IN
              <foreach collection="includeIdList" item="item" open="(" close=")"
                       separator=",">
                     #{item}
              </foreach>
          </if>
        <if test="excludeIdList !=null and excludeIdList.size() >0">
            AND `id` NOT IN
            <foreach collection="excludeIdList" item="item" open="(" close=")" separator=",">
                     #{item}
            </foreach>
        </if>
          <if test="includeBlockNumberList !=null and includeBlockNumberList.size()>0">
              AND `block_number` IN
              <foreach collection="includeBlockNumberList" item="item" open="(" close=")"
                       separator=",">
                     #{item}
              </foreach>
          </if>
        <if test="excludeBlockNumberList !=null and excludeBlockNumberList.size() >0">
            AND `block_number` NOT IN
            <foreach collection="excludeBlockNumberList" item="item" open="(" close=")" separator=",">
                     #{item}
            </foreach>
        </if>
          <if test="includeTxHashList !=null and includeTxHashList.size()>0">
              AND `tx_hash` IN
              <foreach collection="includeTxHashList" item="item" open="(" close=")"
                       separator=",">
                     #{item}
              </foreach>
          </if>
        <if test="excludeTxHashList !=null and excludeTxHashList.size() >0">
            AND `tx_hash` NOT IN
            <foreach collection="excludeTxHashList" item="item" open="(" close=")" separator=",">
                     #{item}
            </foreach>
        </if>
          <if test="includeQuantityList !=null and includeQuantityList.size()>0">
              AND `quantity` IN
              <foreach collection="includeQuantityList" item="item" open="(" close=")"
                       separator=",">
                     #{item}
              </foreach>
          </if>
        <if test="excludeQuantityList !=null and excludeQuantityList.size() >0">
            AND `quantity` NOT IN
            <foreach collection="excludeQuantityList" item="item" open="(" close=")" separator=",">
                     #{item}
            </foreach>
        </if>
          <if test="includeTypeList !=null and includeTypeList.size()>0">
              AND `type` IN
              <foreach collection="includeTypeList" item="item" open="(" close=")"
                       separator=",">
                     #{item}
              </foreach>
          </if>
        <if test="excludeTypeList !=null and excludeTypeList.size() >0">
            AND `type` NOT IN
            <foreach collection="excludeTypeList" item="item" open="(" close=")" separator=",">
                     #{item}
            </foreach>
        </if>
          <if test="includeFromList !=null and includeFromList.size()>0">
              AND `from` IN
              <foreach collection="includeFromList" item="item" open="(" close=")"
                       separator=",">
                     #{item}
              </foreach>
          </if>
        <if test="excludeFromList !=null and excludeFromList.size() >0">
            AND `from` NOT IN
            <foreach collection="excludeFromList" item="item" open="(" close=")" separator=",">
                     #{item}
            </foreach>
        </if>
          <if test="includeToList !=null and includeToList.size()>0">
              AND `to` IN
              <foreach collection="includeToList" item="item" open="(" close=")"
                       separator=",">
                     #{item}
              </foreach>
          </if>
        <if test="excludeToList !=null and excludeToList.size() >0">
            AND `to` NOT IN
            <foreach collection="excludeToList" item="item" open="(" close=")" separator=",">
                     #{item}
            </foreach>
        </if>
          <if test="includeContractAddressList !=null and includeContractAddressList.size()>0">
              AND `contract_address` IN
              <foreach collection="includeContractAddressList" item="item" open="(" close=")"
                       separator=",">
                     #{item}
              </foreach>
          </if>
        <if test="excludeContractAddressList !=null and excludeContractAddressList.size() >0">
            AND `contract_address` NOT IN
            <foreach collection="excludeContractAddressList" item="item" open="(" close=")" separator=",">
                     #{item}
            </foreach>
        </if>
          <if test="includeStatusList !=null and includeStatusList.size()>0">
              AND `status` IN
              <foreach collection="includeStatusList" item="item" open="(" close=")"
                       separator=",">
                     #{item}
              </foreach>
          </if>
        <if test="excludeStatusList !=null and excludeStatusList.size() >0">
            AND `status` NOT IN
            <foreach collection="excludeStatusList" item="item" open="(" close=")" separator=",">
                     #{item}
            </foreach>
        </if>
          <if test="includeTimestampList !=null and includeTimestampList.size()>0">
              AND `timestamp` IN
              <foreach collection="includeTimestampList" item="item" open="(" close=")"
                       separator=",">
                     #{item}
              </foreach>
          </if>
        <if test="excludeTimestampList !=null and excludeTimestampList.size() >0">
            AND `timestamp` NOT IN
            <foreach collection="excludeTimestampList" item="item" open="(" close=")" separator=",">
                     #{item}
            </foreach>
        </if>
          <if test="includeCreateTimeList !=null and includeCreateTimeList.size()>0">
              AND `create_time` IN
              <foreach collection="includeCreateTimeList" item="item" open="(" close=")"
                       separator=",">
                     #{item}
              </foreach>
          </if>
        <if test="excludeCreateTimeList !=null and excludeCreateTimeList.size() >0">
            AND `create_time` NOT IN
            <foreach collection="excludeCreateTimeList" item="item" open="(" close=")" separator=",">
                     #{item}
            </foreach>
        </if>
          <if test="includeModifyTimeList !=null and includeModifyTimeList.size()>0">
              AND `modify_time` IN
              <foreach collection="includeModifyTimeList" item="item" open="(" close=")"
                       separator=",">
                     #{item}
              </foreach>
          </if>
        <if test="excludeModifyTimeList !=null and excludeModifyTimeList.size() >0">
            AND `modify_time` NOT IN
            <foreach collection="excludeModifyTimeList" item="item" open="(" close=")" separator=",">
                     #{item}
            </foreach>
        </if>
    </sql>

    <sql id="_common_sort">
        <if test="sorts !=null">
            ORDER BY
            <foreach collection="sorts" item="sort" separator=",">
            ${sort.columnName} ${sort.sortMode.mode}
            </foreach>
        </if>
    </sql>

    <sql id="_page_field">
        <if test="offset != null and rows !=null">
           LIMIT #{offset},#{rows}
        </if>
    </sql>

    <insert id="insert" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO `erc20_usdt_tx_log`
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <include refid="_field_list"/>
        </trim>
        VALUES
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <include refid="_value_list"/>
        </trim>
    </insert>

    <insert id="batchInsert" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO `erc20_usdt_tx_log`
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <include refid="_field_list"/>
        </trim>
        VALUES
        <foreach collection="list" item="item" separator=",">
            (
            <include refid="_batch_value_list"/>
            )
        </foreach>
    </insert>

    <select id="selectById" parameterType="java.lang.Long" resultMap="Erc20UsdtTxLogMap">
        SELECT
        <include refid="_field_list"/>
        FROM `erc20_usdt_tx_log`
        WHERE `id` = #{id} limit 1
    </select>

    <select id="selectByIdForUpdate" parameterType="java.lang.Long"
            resultMap="Erc20UsdtTxLogMap">
        SELECT
        <include refid="_field_list"/>
        FROM `erc20_usdt_tx_log`
        WHERE `id` = #{id} limit 1 FOR UPDATE
    </select>

    <delete id="deleteById" parameterType="java.lang.Long">
        DELETE FROM `erc20_usdt_tx_log` WHERE `id` = #
        {id} limit 1
    </delete>

    <delete id="deleteByParam" parameterType="map">
        DELETE
        FROM `erc20_usdt_tx_log`
        <where>
            <include refid="_common_where"/>
        </where>
    </delete>

    <update id="updateById">
        UPDATE `erc20_usdt_tx_log`
        <trim prefix="SET" suffixOverrides="," prefixOverrides=",">
            <if test="blockNumber !=null">`block_number`=#{blockNumber},</if>
            <if test="txHash !=null">`tx_hash`=#{txHash},</if>
            <if test="quantity !=null">`quantity`=#{quantity},</if>
            <if test="type !=null">`type`=#{type},</if>
            <if test="from !=null">`from`=#{from},</if>
            <if test="to !=null">`to`=#{to},</if>
            <if test="contractAddress !=null">`contract_address`=#{contractAddress},</if>
            <if test="status !=null">`status`=#{status},</if>
            <if test="timestamp !=null">`timestamp`=#{timestamp},</if>
            <if test="createTime !=null">`create_time`=#{createTime},</if>
            <if test="modifyTime !=null">`modify_time`=#{modifyTime},</if>
        </trim>
        WHERE `id`=#{id} LIMIT 1
    </update>

    <update id="updateByQuery">
        UPDATE `erc20_usdt_tx_log`
        <trim prefix="SET" suffixOverrides="," prefixOverrides=",">
            <if test="po.blockNumber !=null">`block_number`=#{po.blockNumber},</if>
            <if test="po.txHash !=null">`tx_hash`=#{po.txHash},</if>
            <if test="po.quantity !=null">`quantity`=#{po.quantity},</if>
            <if test="po.type !=null">`type`=#{po.type},</if>
            <if test="po.from !=null">`from`=#{po.from},</if>
            <if test="po.to !=null">`to`=#{po.to},</if>
            <if test="po.contractAddress !=null">`contract_address`=#{po.contractAddress},</if>
            <if test="po.status !=null">`status`=#{po.status},</if>
            <if test="po.timestamp !=null">`timestamp`=#{po.timestamp},</if>
            <if test="po.createTime !=null">`create_time`=#{po.createTime},</if>
            <if test="po.modifyTime !=null">`modify_time`=#{po.modifyTime},</if>
        </trim>
        <where>
            <if test="query.id !=null">AND `id`=#
                {query.id}
            </if>
            <if test="query.blockNumber !=null">AND `block_number`=#
                {query.blockNumber}
            </if>
            <if test="query.txHash !=null">AND `tx_hash`=#
                {query.txHash}
            </if>
            <if test="query.quantity !=null">AND `quantity`=#
                {query.quantity}
            </if>
            <if test="query.type !=null">AND `type`=#
                {query.type}
            </if>
            <if test="query.from !=null">AND `from`=#
                {query.from}
            </if>
            <if test="query.to !=null">AND `to`=#
                {query.to}
            </if>
            <if test="query.contractAddress !=null">AND `contract_address`=#
                {query.contractAddress}
            </if>
            <if test="query.status !=null">AND `status`=#
                {query.status}
            </if>
            <if test="query.timestamp !=null">AND `timestamp`=#
                {query.timestamp}
            </if>
            <if test="query.createTime !=null">AND `create_time`=#
                {query.createTime}
            </if>
            <if test="query.modifyTime !=null">AND `modify_time`=#
                {query.modifyTime}
            </if>
        </where>
    </update>

    <select id="queryListByParam" parameterType="map" resultMap="Erc20UsdtTxLogMap">
        SELECT
        <include refid="_field_list"/>
        FROM `erc20_usdt_tx_log`
        <where>
            <include refid="_common_where"/>
        </where>
        <include refid="_common_sort"/>
        <include refid="_page_field"/>
    </select>

    <select id="queryCountByParam" parameterType="map" resultType="java.lang.Integer">
        SELECT
        COUNT(*)
        FROM `erc20_usdt_tx_log`
        <where>
            <include refid="_common_where"/>
        </where>
    </select>

    <!--pk field list search-->
    <select id="queryPkListByParam" parameterType="map" resultType="java.lang.Long">
        SELECT
        `id`
        FROM `erc20_usdt_tx_log`
        <where>
            <include refid="_common_where"/>
        </where>
        <include refid="_common_sort"/>
        <include refid="_page_field"/>
    </select>

    <!--single field list search-->
    <select id="queryIdListByParam" parameterType="map" resultType="java.lang.Long">
        SELECT DISTINCT(`id`) FROM `erc20_usdt_tx_log`
        <where>
            <include refid="_common_where"/>
        </where>
        <include refid="_common_sort"/>
        <include refid="_page_field"/>
    </select>

    <select id="queryBlockNumberListByParam" parameterType="map" resultType="java.lang.Long">
        SELECT DISTINCT(`block_number`) FROM `erc20_usdt_tx_log`
        <where>
            <include refid="_common_where"/>
        </where>
        <include refid="_common_sort"/>
        <include refid="_page_field"/>
    </select>

    <select id="queryTxHashListByParam" parameterType="map" resultType="java.lang.String">
        SELECT DISTINCT(`tx_hash`) FROM `erc20_usdt_tx_log`
        <where>
            <include refid="_common_where"/>
        </where>
        <include refid="_common_sort"/>
        <include refid="_page_field"/>
    </select>

    <select id="queryQuantityListByParam" parameterType="map" resultType="java.math.BigDecimal">
        SELECT DISTINCT(`quantity`) FROM `erc20_usdt_tx_log`
        <where>
            <include refid="_common_where"/>
        </where>
        <include refid="_common_sort"/>
        <include refid="_page_field"/>
    </select>

    <select id="queryTypeListByParam" parameterType="map" resultType="java.lang.Integer">
        SELECT DISTINCT(`type`) FROM `erc20_usdt_tx_log`
        <where>
            <include refid="_common_where"/>
        </where>
        <include refid="_common_sort"/>
        <include refid="_page_field"/>
    </select>

    <select id="queryFromListByParam" parameterType="map" resultType="java.lang.String">
        SELECT DISTINCT(`from`) FROM `erc20_usdt_tx_log`
        <where>
            <include refid="_common_where"/>
        </where>
        <include refid="_common_sort"/>
        <include refid="_page_field"/>
    </select>

    <select id="queryToListByParam" parameterType="map" resultType="java.lang.String">
        SELECT DISTINCT(`to`) FROM `erc20_usdt_tx_log`
        <where>
            <include refid="_common_where"/>
        </where>
        <include refid="_common_sort"/>
        <include refid="_page_field"/>
    </select>

    <select id="queryContractAddressListByParam" parameterType="map" resultType="java.lang.String">
        SELECT DISTINCT(`contract_address`) FROM `erc20_usdt_tx_log`
        <where>
            <include refid="_common_where"/>
        </where>
        <include refid="_common_sort"/>
        <include refid="_page_field"/>
    </select>

    <select id="queryStatusListByParam" parameterType="map" resultType="java.lang.Integer">
        SELECT DISTINCT(`status`) FROM `erc20_usdt_tx_log`
        <where>
            <include refid="_common_where"/>
        </where>
        <include refid="_common_sort"/>
        <include refid="_page_field"/>
    </select>

    <select id="queryTimestampListByParam" parameterType="map" resultType="java.lang.Long">
        SELECT DISTINCT(`timestamp`) FROM `erc20_usdt_tx_log`
        <where>
            <include refid="_common_where"/>
        </where>
        <include refid="_common_sort"/>
        <include refid="_page_field"/>
    </select>

    <select id="queryCreateTimeListByParam" parameterType="map" resultType="java.util.Date">
        SELECT DISTINCT(`create_time`) FROM `erc20_usdt_tx_log`
        <where>
            <include refid="_common_where"/>
        </where>
        <include refid="_common_sort"/>
        <include refid="_page_field"/>
    </select>

    <select id="queryModifyTimeListByParam" parameterType="map" resultType="java.util.Date">
        SELECT DISTINCT(`modify_time`) FROM `erc20_usdt_tx_log`
        <where>
            <include refid="_common_where"/>
        </where>
        <include refid="_common_sort"/>
        <include refid="_page_field"/>
    </select>


    <!--single field Count search-->
    <select id="queryIdCountByParam" parameterType="map" resultType="java.lang.Integer">
        SELECT COUNT(DISTINCT(`id`)) FROM `erc20_usdt_tx_log`
        <where>
            <include refid="_common_where"/>
        </where>
    </select>

    <select id="queryBlockNumberCountByParam" parameterType="map" resultType="java.lang.Integer">
        SELECT COUNT(DISTINCT(`block_number`)) FROM `erc20_usdt_tx_log`
        <where>
            <include refid="_common_where"/>
        </where>
    </select>

    <select id="queryTxHashCountByParam" parameterType="map" resultType="java.lang.Integer">
        SELECT COUNT(DISTINCT(`tx_hash`)) FROM `erc20_usdt_tx_log`
        <where>
            <include refid="_common_where"/>
        </where>
    </select>

    <select id="queryQuantityCountByParam" parameterType="map" resultType="java.lang.Integer">
        SELECT COUNT(DISTINCT(`quantity`)) FROM `erc20_usdt_tx_log`
        <where>
            <include refid="_common_where"/>
        </where>
    </select>

    <select id="queryTypeCountByParam" parameterType="map" resultType="java.lang.Integer">
        SELECT COUNT(DISTINCT(`type`)) FROM `erc20_usdt_tx_log`
        <where>
            <include refid="_common_where"/>
        </where>
    </select>

    <select id="queryFromCountByParam" parameterType="map" resultType="java.lang.Integer">
        SELECT COUNT(DISTINCT(`from`)) FROM `erc20_usdt_tx_log`
        <where>
            <include refid="_common_where"/>
        </where>
    </select>

    <select id="queryToCountByParam" parameterType="map" resultType="java.lang.Integer">
        SELECT COUNT(DISTINCT(`to`)) FROM `erc20_usdt_tx_log`
        <where>
            <include refid="_common_where"/>
        </where>
    </select>

    <select id="queryContractAddressCountByParam" parameterType="map" resultType="java.lang.Integer">
        SELECT COUNT(DISTINCT(`contract_address`)) FROM `erc20_usdt_tx_log`
        <where>
            <include refid="_common_where"/>
        </where>
    </select>

    <select id="queryStatusCountByParam" parameterType="map" resultType="java.lang.Integer">
        SELECT COUNT(DISTINCT(`status`)) FROM `erc20_usdt_tx_log`
        <where>
            <include refid="_common_where"/>
        </where>
    </select>

    <select id="queryTimestampCountByParam" parameterType="map" resultType="java.lang.Integer">
        SELECT COUNT(DISTINCT(`timestamp`)) FROM `erc20_usdt_tx_log`
        <where>
            <include refid="_common_where"/>
        </where>
    </select>

    <select id="queryCreateTimeCountByParam" parameterType="map" resultType="java.lang.Integer">
        SELECT COUNT(DISTINCT(`create_time`)) FROM `erc20_usdt_tx_log`
        <where>
            <include refid="_common_where"/>
        </where>
    </select>

    <select id="queryModifyTimeCountByParam" parameterType="map" resultType="java.lang.Integer">
        SELECT COUNT(DISTINCT(`modify_time`)) FROM `erc20_usdt_tx_log`
        <where>
            <include refid="_common_where"/>
        </where>
    </select>

</mapper>